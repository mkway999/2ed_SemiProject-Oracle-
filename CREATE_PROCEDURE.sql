--① 관리자 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_ADMIN
(
   V_SSN    IN  ADMINS.A_SSN%TYPE
,  V_NAME   IN  ADMINS.A_NAME%TYPE
,  V_TEL    IN  ADMINS.A_TEL%TYPE
,  V_PW     IN  ADMINS.A_PW%TYPE
)
IS
    V_COUNT NUMBER;
BEGIN
    INSERT INTO ADMINS(A_CODE, A_NAME, A_SSN, A_TEL, A_PW)
    VALUES (   ADMINS_SEQ.NEXTVAL, V_NAME, V_SSN, V_TEL, V_PW   );
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
END;

--② 관리자 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_ADMINS
( V_A IN ADMINS.A_CODE%TYPE
, V_NAME IN ADMINS.A_NAME%TYPE
, V_TEL IN ADMINS.A_TEL%TYPE
, V_PW IN ADMINS.A_PW%TYPE)
IS
BEGIN
    UPDATE ADMINS
    SET A_NAME = V_NAME, A_TEL = V_TEL, A_PW = V_PW
    WHERE A_CODE = V_A;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--③ 관리자 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_ADMINS
( V_A IN ADMINS.A_CODE%TYPE
)
IS
BEGIN

    DELETE
    FROM ADMINS
    WHERE A_CODE = V_A;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--① 교수자 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_PROFESSORS
(
   V_SSN    IN  PROFESSORS.P_SSN%TYPE
,  V_NAME   IN  PROFESSORS.P_NAME%TYPE
,  V_TEL    IN  PROFESSORS.P_TEL%TYPE
,  V_ID     IN  PROFESSORS.P_ID%TYPE
)
IS
BEGIN
    INSERT INTO PROFESSORS(P_CODE, P_NAME, P_SSN, P_TEL, P_ID)
    VALUES (   PROFESSORS_SEQ.NEXTVAL, V_NAME, V_SSN, V_TEL, V_ID   );
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
END;

--② 교수자 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_PRO
(
    V_CODE  IN  PROFESSORS.P_CODE%TYPE
,   V_NAME  IN  PROFESSORS.P_NAME%TYPE
,   V_TEL   IN  PROFESSORS.P_TEL%TYPE
,   V_ID    IN  PROFESSORS.P_ID%TYPE
,   V_PW    IN  PROFESSORS.P_PW%TYPE
)
IS
BEGIN
    UPDATE PROFESSORS
    SET P_NAME = V_NAME, P_TEL = V_TEL, P_ID = V_ID, P_PW = V_PW
    WHERE P_CODE = V_CODE;
    
    EXCEPTION
        WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
END;

--③ 교수자 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_PROFESSOR
(
    V_P_CODE    IN  PROFESSORS.P_CODE%TYPE
)
IS
    V_NUM   NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_NUM
    FROM OPENED_SUBJECTS;
    
    IF(V_NUM > 0)
        THEN RAISE_APPLICATION_ERROR(-20001, '진행했던 과목이 있습니다');
    END IF;
    
    DELETE
    FROM PROFESSORS
    WHERE P_CODE = V_P_CODE;     
END;

--① 학생 데이터 입력
CREATE OR REPLACE PROCEDURE INSERT_STUDENTS
(
   V_SSN    IN  STUDENTS.S_SSN%TYPE
,  V_NAME   IN  STUDENTS.S_NAME%TYPE
,  V_TEL    IN  STUDENTS.S_TEL%TYPE
,  V_ID     IN  STUDENTS.S_ID%TYPE
)
IS
BEGIN
    INSERT INTO STUDENTS(S_CODE, S_NAME, S_SSN, S_TEL, S_ID)
    VALUES (   STUDENTS_SEQ.NEXTVAL, V_NAME, V_SSN, V_TEL, V_ID   );
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
END;

--② 학생 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_STUDENTS
(
    V_CODE  IN  STUDENTS.S_CODE%TYPE
,   V_NAME  IN  STUDENTS.S_NAME%TYPE
,   V_TEL   IN  STUDENTS.S_TEL%TYPE
,   V_ID    IN  STUDENTS.S_ID%TYPE
,   V_PW    IN  STUDENTS.S_PW%TYPE
)
IS
BEGIN
    UPDATE STUDENTS
    SET S_NAME = V_NAME, S_TEL = S_TEL, S_ID = S_ID, S_PW = V_PW
    WHERE S_CODE = V_CODE;
    
    EXCEPTION
        WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
END;

--③ 학생 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_STUDENTS
(
    V_S_CODE    IN  STUDENTS.S_CODE%TYPE
)
IS
    V_NUM   NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_NUM
    FROM REGISTRATION;
    
    IF(V_NUM > 0)
        THEN RAISE_APPLICATION_ERROR(-20001, '수강신청 기록이 있는 학생입니다.');
    END IF;
    
    DELETE 
    FROM STUDENTS
    WHERE S_CODE = V_S_CODE;
END;

--① 강의실 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_CLASSROOMS
(V_NAME IN CLASSROOMS.RM_NAME%TYPE
, V_INFO IN CLASSROOMS.RM_INFO%TYPE
)
IS
BEGIN
    INSERT INTO CLASSROOMS(RM_CODE, RM_NAME, RM_INFO)
    VALUES(CONCAT('RM',CLASSROOMS_SEQ.NEXTVAL), V_NAME, V_INFO);
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
                 ROLLBACK;
    COMMIT;
END;

--② 강의실 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_CLASSROOMS
( V_RM IN CLASSROOMS.RM_CODE%TYPE
, V_NA IN CLASSROOMS.RM_NAME%TYPE
, V_IN IN CLASSROOMS.RM_INFO%TYPE)
IS
BEGIN
    UPDATE CLASSROOMS
    SET RM_NAME = V_NA, RM_INFO = V_IN
    WHERE RM_CODE = V_RM;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--③ 강의실 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_CLASSROOMS
( V_RM IN CLASSROOMS.RM_CODE%TYPE
)
IS
    TEMP OPENED_COURSES.OC_CODE%TYPE;
    
    CURSOR CUR_OC
    IS
    SELECT OC_CODE
    FROM OPENED_COURSES
    WHERE RM_CODE = V_RM; 
BEGIN
    OPEN CUR_OC;
    
    FETCH CUR_OC INTO TEMP;
    
    CASE WHEN CUR_OC%NOTFOUND
         THEN DELETE
              FROM CLASSROOMS
              WHERE RM_CODE = V_RM;
    ELSE
        UPDATE CLASSROOMS
        SET RM_NAME = CONCAT(RM_NAME,'(폐관)')
        WHERE RM_CODE = V_RM;
    END CASE;
    
    CLOSE CUR_OC;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--① 교재 데이터 등록 프로시저
CREATE OR REPLACE PROCEDURE INSERT_BOOKS
(V_NAME IN BOOKS.BK_NAME%TYPE
)
IS
BEGIN
    INSERT INTO BOOKS(BK_CODE, BK_NAME)
    VALUES(CONCAT('BK',BOOKS_SEQ.NEXTVAL), V_NAME);
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보가 틀렸습니다. 다시 입력하세요');
                 ROLLBACK;
    COMMIT;
END;

--② 교재 데이터 수정 프로시저
CREATE OR REPLACE PROCEDURE UPDATE_BOOKS
( V_BK IN BOOKS.BK_CODE%TYPE
, V_NA IN BOOKS.BK_NAME%TYPE
)
IS
BEGIN
    UPDATE BOOKS
    SET BK_NAME = V_NA
    WHERE BK_CODE = V_BK;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--③ 교재 데이터 삭제 프로시저
CREATE OR REPLACE PROCEDURE DELETE_BOOKS
( V_BK IN BOOKS.BK_CODE%TYPE
)
IS
    TEMP OPENED_SUBJECTS.OS_CODE%TYPE;
    
    CURSOR CUR_OS
    IS
    SELECT OS_CODE
    FROM OPENED_SUBJECTS
    WHERE BK_CODE = V_BK; 
BEGIN
    OPEN CUR_OS;
    
    FETCH CUR_OS INTO TEMP;
    
    CASE WHEN CUR_OS%NOTFOUND
         THEN DELETE
              FROM BOOKS
              WHERE BK_CODE = V_BK;
    ELSE
        UPDATE BOOKS
        SET BK_NAME = CONCAT(BK_NAME,'(절판)')
        WHERE BK_CODE = V_BK;
    END CASE;
    
    CLOSE CUR_OS;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--① 중도포기사유 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_DROP_REASONS
( V_REASON IN DROP_REASONS.DR_REASON%TYPE
)
IS
BEGIN
    INSERT INTO DROP_REASONS(DR_CODE, DR_REASON)
    VALUES(CONCAT('DR',DR_SEQ.NEXTVAL), V_REASON);
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20014, '똑바로입력하세요.');
            ROLLBACK;
    COMMIT;
END;

--② 중도포기사유 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_DROP_REASONS
( V_DR IN DROP_REASONS.DR_CODE%TYPE
, V_RS IN DROP_REASONS.DR_REASON%TYPE
)
IS
BEGIN
    UPDATE DROP_REASONS
    SET DR_REASON = V_RS
    WHERE DR_CODE = V_DR;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
   COMMIT;
END;

--③ 중도포기사유 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_DROP_REASONS
( V_DR IN DROP_REASONS.DR_CODE%TYPE
)
IS
    TEMP DROP_LIST.DL_CODE%TYPE;
    
    CURSOR CUR_DL
    IS
    SELECT DL_CODE
    FROM DROP_LIST
    WHERE DR_CODE = V_DR; 
BEGIN
    OPEN CUR_DL;
    
    FETCH CUR_DL INTO TEMP;
    
    CASE WHEN CUR_DL%NOTFOUND
         THEN DELETE
              FROM DROP_REASONS
              WHERE DR_CODE = V_DR;
    ELSE
        UPDATE DROP_REASONS
        SET DR_REASON = CONCAT(DR_REASON,'(사용금지)')
        WHERE DR_CODE = V_DR;
    END CASE;
    
    CLOSE CUR_DL;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--① 과정 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_COURSES
( V_CR_NAME        IN   COURSES.CR_NAME%TYPE
)
IS
    V_CR_CODE           COURSES.CR_CODE%TYPE;    
BEGIN
INSERT INTO COURSES(CR_CODE, CR_NAME)
VALUES(CONCAT('C',COURSES_SEQ.NEXTVAL), V_CR_NAME);

END;

--② 과정 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_COURSES
( V_CR_CODE     IN COURSES.CR_CODE%TYPE
, V_CR_NAME     IN COURSES.CR_NAME%TYPE
)
IS
    V_CR_CODE_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CR_CODE_COUNT
    FROM COURSES
    WHERE CR_CODE = V_CR_CODE;
    
    IF (V_CR_CODE_COUNT = 0)
        THEN
            RAISE_APPLICATION_ERROR(-20005, '과정 코드가 존재하지 않습니다.');
            ROLLBACK;
    END IF;

    UPDATE COURSES
    SET CR_NAME = V_CR_NAME
    WHERE CR_CODE = V_CR_CODE;
    
    COMMIT;
END;

--③ 과정 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_COURSES
(
    V_CR_CODE   IN  COURSES.CR_CODE%TYPE
)
IS
    V_START     DATE;
    V_END       DATE;

    CURSOR H1
    IS
    SELECT OC_START_DATE, OC_END_DATE
    FROM OPENED_COURSES
    WHERE CR_CODE = V_CR_CODE;
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    OPEN H1;
        LOOP
            FETCH H1 INTO V_START, V_END;
                IF(SYSDATE BETWEEN V_START AND V_END)
                    THEN RAISE USER_DEFINE_ERROR;
                END IF;
                
            EXIT WHEN H1%NOTFOUND;
        END LOOP;
    CLOSE H1;
    
    UPDATE COURSES
    SET CR_NAME = CONCAT(CR_NAME, '(폐강)')
    WHERE CR_CODE = V_CR_CODE;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '현재 진행중인 과정입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

① 과목 데이터 등록 - 문정환
CREATE OR REPLACE PROCEDURE INSERT_SUBJECTS
( V_SB_NAME   IN SUBJECTS.SB_NAME%TYPE )
IS
BEGIN
    INSERT INTO SUBJECTS(SB_CODE, SB_NAME)
    VALUES(CONCAT('S',SUBJECTS_SEQ.NEXTVAL), V_SB_NAME);
    
EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.');  
END;

--② 과목 데이터 수정
--과목명 수정
CREATE OR REPLACE PROCEDURE UPDATE_SUBJECTS
( V_SB_CODE     IN SUBJECTS.SB_CODE%TYPE
, V_SB_NAME     IN SUBJECTS.SB_NAME%TYPE )
IS
    V_SB_CODE_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_SB_CODE_COUNT
    FROM SUBJECTS
    WHERE SB_CODE = V_SB_CODE;
    
    IF (V_SB_CODE_COUNT = 0)
        THEN
            RAISE_APPLICATION_ERROR(-20005, '과목 코드가 존재하지 않습니다.');
    END IF;

    UPDATE SUBJECTS
    SET SB_NAME = V_SB_NAME
    WHERE SB_CODE = V_SB_CODE;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.');
END;

--과목 담당 교수자 수정
CREATE OR REPLACE PROCEDURE UPDATE_PROFESSORS
( V_OS_CODE       IN OPENED_SUBJECTS.OS_CODE%TYPE
, V_P_CODE        IN PROFESSORS.P_CODE%TYPE )
IS
    V_OS_START_DATE     DATE;
    V_OS_END_DATE       DATE;
BEGIN
    SELECT OS_START_DATE INTO V_OS_START_DATE
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;

    SELECT OS_END_DATE INTO V_OS_END_DATE
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
        
    IF(V_OS_START_DATE > SYSDATE
       OR V_OS_END_DATE < SYSDATE)
        THEN
            UPDATE OPENED_SUBJECTS
            SET P_CODE = V_P_CODE
            WHERE OS_CODE = V_OS_CODE;
    ELSE
        RAISE_APPLICATION_ERROR(-20005, '수업 강의중이므로 수정이 불가능합니다');     
    END IF;
    
    IF (V_OS_END_DATE < SYSDATE)
        THEN 
            RAISE_APPLICATION_ERROR(-20005, '끝난 수업이므로 수정이 불가능 합니다.');
    END IF;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.');
END;

--③ 과목 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_SUBJECTS
(
    V_SB_CODE   IN  SUBJECTS.SB_CODE%TYPE
)
IS
    V_START     DATE;
    V_END       DATE;

    CURSOR H1
    IS
    SELECT OS_START_DATE, OS_END_DATE
    FROM OPENED_SUBJECTS
    WHERE SB_CODE = V_SB_CODE;
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    OPEN H1;
        LOOP
            FETCH H1 INTO V_START, V_END;
                IF(SYSDATE BETWEEN V_START AND V_END)
                    THEN RAISE USER_DEFINE_ERROR;
                END IF;
                
            EXIT WHEN H1%NOTFOUND;
        END LOOP;
    CLOSE H1;
    
    UPDATE SUBJECTS
    SET SB_NAME = CONCAT(SB_NAME, '(폐강)')
    WHERE SB_CODE = V_SB_CODE;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '현재 진행중인 과목입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;

--① 개설과정 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_OPENCOURSES
( V_CR_CODE        IN COURSES.CR_CODE%TYPE
, V_OC_NUM         IN OPENED_COURSES.OC_NUM%TYPE
, V_OC_START_DATE  IN DATE
, V_OC_END_DATE    IN DATE
, V_RM_CODE        IN CLASSROOMS.RM_CODE%TYPE
)
IS
 CK_CODE  NUMBER;
 V_START DATE;
 V_END   DATE;
 
        CURSOR H1
        IS
        SELECT OC_START_DATE, OC_END_DATE
        FROM OPENED_COURSES
        WHERE RM_CODE = V_RM_CODE;
 
BEGIN
        SELECT COUNT(*) INTO CK_CODE
        FROM COURSES
        WHERE CR_CODE = V_CR_CODE;
        
        IF(CK_CODE = 0)
            THEN RAISE_APPLICATION_ERROR(-20003, '올바른 과정코드가 아닙니다.');
        END IF;
        
        SELECT COUNT(*) INTO CK_CODE
        FROM CLASSROOMS
        WHERE RM_CODE = V_RM_CODE;
        
        IF(CK_CODE = 0)
            THEN RAISE_APPLICATION_ERROR(-20003, '올바른 강의실코드가 아닙니다.');
        END IF;
        
        OPEN H1;
        
        LOOP
            FETCH H1 INTO V_START, V_END;
            
            IF(V_OC_START_DATE BETWEEN V_START AND V_END) OR (V_OC_END_DATE BETWEEN V_START AND V_END)
            OR (V_START BETWEEN V_OC_START_DATE AND V_OC_END_DATE) OR(V_END BETWEEN V_OC_START_DATE AND V_OC_END_DATE)
                THEN RAISE_APPLICATION_ERROR(-20003, '해당 강의실의 기간과 겹침');
            END IF;
        EXIT WHEN H1%NOTFOUND;
        END LOOP;
    
        CLOSE H1;
               
INSERT INTO OPENED_COURSES(OC_CODE, CR_CODE, RM_CODE, OC_NUM, OC_START_DATE, OC_END_DATE)
VALUES(CONCAT('OC',OC_SEQ.NEXTVAL), V_CR_CODE, V_RM_CODE, V_OC_NUM, TO_DATE(V_OC_START_DATE,'YYYY-MM-DD'), TO_DATE(V_OC_END_DATE,'YYYY-MM-DD'));

END;

--② 개설과정 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_OPENCOURSES
( V_OC_CODE          IN  OPENED_COURSES.OC_CODE%TYPE
, V_CR_CODE          IN  COURSES.CR_CODE%TYPE
, V_RM_CODE          IN  CLASSROOMS.RM_NAME%TYPE
, V_OC_NUM           IN  OPENED_COURSES.OC_NUM%TYPE
, V_OC_START_DATE    IN  OPENED_COURSES.OC_START_DATE%TYPE
, V_OC_END_DATE      IN  OPENED_COURSES.OC_END_DATE%TYPE
)
IS
CK_OC_CODE          NUMBER;
CK_CR_CODE          NUMBER;
CK_RM_CODE          NUMBER;
V_OS_START_DATE     OPENED_SUBJECTS.OS_START_DATE%TYPE;  -- 과목 시작기간
V_OS_END_DATE       OPENED_SUBJECTS.OS_END_DATE%TYPE;    -- 과목 끝 기간
G_START_DATE        OPENED_COURSES.OC_START_DATE%TYPE;   -- 기존 과정 시작 기간
G_END_DATE          OPENED_COURSES.OC_END_DATE%TYPE;     -- 기존 과정 끝 기간
G_OC_START_DATE     OPENED_COURSES.OC_START_DATE%TYPE;   -- 커서에 넣어줄 시작 기간
G_OC_END_DATE       OPENED_COURSES.OC_END_DATE%TYPE;     -- 커서에 넣어줄 끝 기간

CK_OC_GODE         EXCEPTION;
CK_CR_GODE         EXCEPTION;
CK_RM_GODE         EXCEPTION;
CK_START_DATE      EXCEPTION;
CK_RM_START_DATE   EXCEPTION;
CK_OC_START_DATE   EXCEPTION;


CURSOR              CR_SUBJECTS
IS
SELECT OS_START_DATE, OS_END_DATE 
FROM OPENED_SUBJECTS
WHERE OC_CODE = V_OC_CODE;

CURSOR              CR_COURSES
IS
SELECT OC_START_DATE, OC_END_DATE 
FROM OPENED_COURSES
WHERE RM_CODE = V_RM_CODE
  AND OC_CODE != V_OC_CODE;

BEGIN

SELECT COUNT(*) INTO CK_OC_CODE
FROM OPENED_COURSES
WHERE OC_CODE = V_OC_CODE;

IF(CK_OC_CODE=0)
    THEN RAISE CK_OC_GODE;
END IF;

SELECT OC_START_DATE, OC_END_DATE  INTO G_START_DATE, G_END_DATE
FROM OPENED_COURSES
WHERE OC_CODE = V_OC_CODE;

SELECT COUNT(*) INTO CK_CR_CODE
FROM COURSES
WHERE CR_CODE = V_CR_CODE;

IF(CK_CR_CODE=0)
    THEN RAISE CK_CR_GODE;
END IF;

SELECT COUNT(*) INTO CK_RM_CODE
FROM CLASSROOMS
WHERE RM_CODE = V_RM_CODE;

IF(CK_RM_CODE=0)
    THEN RAISE CK_RM_GODE;
END IF;

OPEN CR_SUBJECTS;
OPEN CR_COURSES;

LOOP

FETCH CR_SUBJECTS INTO V_OS_START_DATE, V_OS_END_DATE;
FETCH CR_COURSES INTO G_OC_START_DATE, G_OC_END_DATE;

EXIT WHEN CR_COURSES%NOTFOUND;


IF ((G_START_DATE - V_OC_START_DATE < 0 AND V_OS_START_DATE - V_OC_START_DATE <= 0)
    OR (G_END_DATE - V_OC_END_DATE > 0 AND V_OS_END_DATE - V_OC_END_DATE >= 0))
    THEN RAISE CK_START_DATE; 
END IF;

IF ((V_OC_START_DATE BETWEEN G_OC_START_DATE AND G_OC_END_DATE) OR (V_OC_END_DATE BETWEEN G_OC_START_DATE AND G_OC_END_DATE)
    OR (G_OC_START_DATE BETWEEN V_OC_START_DATE AND V_OC_END_DATE) OR (G_OC_END_DATE BETWEEN V_OC_START_DATE AND V_OC_END_DATE))
    THEN RAISE CK_RM_START_DATE;
END IF;

END LOOP;

CLOSE CR_SUBJECTS;
CLOSE CR_COURSES;

IF (G_START_DATE < SYSDATE)
    THEN RAISE CK_OC_START_DATE;
END IF;

UPDATE OPENED_COURSES
SET CR_CODE = V_CR_CODE, RM_CODE = V_RM_CODE, OC_NUM = V_OC_NUM, OC_START_DATE = V_OC_START_DATE, OC_END_DATE = V_OC_END_DATE
WHERE OC_CODE = V_OC_CODE;

EXCEPTION
    WHEN CK_OC_GODE
        THEN RAISE_APPLICATION_ERROR(-20003, '올바른 개설 과정코드가 아닙니다.');
    WHEN CK_CR_GODE
        THEN RAISE_APPLICATION_ERROR(-20003, '올바른 과정코드가 아닙니다.');
    WHEN CK_RM_GODE
        THEN RAISE_APPLICATION_ERROR(-20003, '올바른 강의실코드가 아닙니다.');
    WHEN CK_START_DATE
        THEN RAISE_APPLICATION_ERROR(-20003, '과목의 기간을 먼저 변경해주세요');
    WHEN CK_RM_START_DATE
        THEN RAISE_APPLICATION_ERROR(-20003, '기간내 사용중인 강의실입니다');
    WHEN CK_OC_START_DATE
        THEN RAISE_APPLICATION_ERROR(-20003, '이미 시작했거나 끝난 과정입니다');
    WHEN OTHERS 
        THEN RAISE_APPLICATION_ERROR(-20003, '똑바로입력하세요.');
        ROLLBACK;
COMMIT;

END;

--③ 개설과정 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_OC
(
    V_OC_CODE   IN  OPENED_COURSES.OC_CODE%TYPE
)
IS
    V_START DATE;
    V_CHECK OPENED_SUBJECTS.OC_CODE%TYPE;
    V_RG_CODE   DROP_LIST.DL_CODE%TYPE;
    
    CURSOR H1
    IS
    SELECT RG_CODE
    FROM REGISTRATION
    WHERE OC_CODE = V_OC_CODE;
BEGIN
    SELECT OC_START_DATE INTO V_START -- 입력받은 개설과정코드로 시작일 뽑아옴
    FROM OPENED_COURSES
    WHERE OC_CODE = V_OC_CODE;
 
    IF (SYSDATE > V_START)
        THEN RAISE_APPLICATION_ERROR(-20001, '진행중인 과정입니다 다시 확인해 주세요');
    END IF;
    
    OPEN H1;
        LOOP
            FETCH H1 INTO V_RG_CODE;
            
            DELETE
            FROM DROP_LIST
            WHERE RG_CODE = V_RG_CODE;
            
            EXIT WHEN H1%NOTFOUND;
        END LOOP;
    CLOSE H1;
    
    -- 개설 과목 코드로 성적 테이블 제거

    DELETE
    FROM SCORE
    WHERE OS_CODE IN (SELECT OS_CODE
                        FROM OPENED_SUBJECTS
                        WHERE OC_CODE = V_OC_CODE);
                        
    -- 개설 과정 코드로 수강신청 제거

    DELETE
    FROM REGISTRATION
    WHERE OC_CODE = V_OC_CODE;

    -- 개설 과정 코드로 개설 과목 제거
    DELETE
    FROM OPENED_SUBJECTS
    WHERE OC_CODE = V_OC_CODE;
    
    -- 개설 과정 코드로 개설 과정 제거
    DELETE
    FROM OPENED_COURSES
    WHERE OC_CODE = V_OC_CODE;
END;

--① 개설과목 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_OPENED_SUBJECTS
( V_OC_CODE         IN OPENED_COURSES.OC_CODE%TYPE
, V_SB_CODE         IN SUBJECTS.SB_CODE%TYPE
, V_OS_START_DATE   IN OPENED_SUBJECTS.OS_START_DATE%TYPE
, V_OS_END_DATE     IN OPENED_SUBJECTS.OS_END_DATE%TYPE
, V_BK_CODE         IN BOOKS.BK_CODE%TYPE
, V_P_CODE          IN PROFESSORS.P_CODE%TYPE )
IS
    V_OC_CODE_COUNT NUMBER;
    V_SB_CODE_COUNT NUMBER;
    V_BK_CODE_COUNT NUMBER;
    V_P_CODE_COUNT  NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_OC_CODE_COUNT
    FROM OPENED_COURSES
    WHERE OC_CODE = V_OC_CODE;
    
    IF (V_OC_CODE_COUNT = 0)
        THEN RAISE_APPLICATION_ERROR(-20005, '개설과정이 존재하지 않습니다');       
    END IF;

    SELECT COUNT(*) INTO V_SB_CODE_COUNT
    FROM SUBJECTS
    WHERE SB_CODE = V_SB_CODE;
    
    IF (V_SB_CODE_COUNT = 0)
        THEN RAISE_APPLICATION_ERROR(-20005, '과목코드가 존재하지 않습니다');       
    END IF;

    SELECT COUNT(*) INTO V_BK_CODE_COUNT
    FROM BOOKS
    WHERE BK_CODE = V_BK_CODE;
    
    IF (V_BK_CODE_COUNT = 0)
        THEN RAISE_APPLICATION_ERROR(-20005, '교재코드가 존재하지 않습니다');  
    END IF;

    SELECT COUNT(*) INTO V_P_CODE_COUNT
    FROM PROFESSORS
    WHERE P_CODE = V_P_CODE;
    
    IF (V_P_CODE_COUNT = 0)
        THEN RAISE_APPLICATION_ERROR(-20005, '교수코드가 존재하지 않습니다');       
    END IF;
    
    INSERT INTO OPENED_SUBJECTS(OS_CODE, OC_CODE, SB_CODE, OS_START_DATE, OS_END_DATE, BK_CODE, P_CODE)
    VALUES (CONCAT('OS',OS_SEQ.NEXTVAL), V_OC_CODE, V_SB_CODE, V_OS_START_DATE, V_OS_END_DATE, V_BK_CODE, V_P_CODE);
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.');
    
END;

--② 개설과목 데이터 수정
--개설과목 정보 수정
CREATE OR REPLACE PROCEDURE UPDATE_OPENED_SUBJECTS
( V_OS_CODE             IN OPENED_SUBJECTS.OS_CODE%TYPE
, V_OS_START_DATE       IN OPENED_SUBJECTS.OS_START_DATE%TYPE
, V_OS_END_DATE         IN OPENED_SUBJECTS.OS_END_DATE%TYPE
, V_SB_CODE             IN OPENED_SUBJECTS.SB_CODE%TYPE
, V_BK_CODE             IN OPENED_SUBJECTS.BK_CODE%TYPE )
IS
    V_OS_CODE_COUNT     NUMBER;
    V_OC_START_DATE     OPENED_COURSES.OC_START_DATE%TYPE;
    V_OC_END_DATE       OPENED_COURSES.OC_END_DATE%TYPE;

    OS_CODE_EXCEPTION   EXCEPTION;
    OS_DATE_EXCEPTION   EXCEPTION;
    OS_DATE_EXCEPTION1  EXCEPTION;
    OS_DATE_EXCEPTION2  EXCEPTION;
    
    START1              DATE;
    END1                DATE;
    V_START             DATE;
    V_FINAL_DATE        DATE;
    
    -- 커서 H1
    CURSOR      H1
    IS
    SELECT OS_START_DATE, OS_END_DATE
    FROM OPENED_SUBJECTS
    WHERE OC_CODE = (SELECT OC_CODE
                     FROM OPENED_SUBJECTS
                     WHERE OS_CODE = V_OS_CODE)
      AND OS_CODE != V_OS_CODE;               
    -- 커서 H2
    CURSOR      H2
    IS
    SELECT OC_START_DATE, OC_END_DATE
    FROM OPENED_COURSES
    WHERE OC_CODE = (SELECT OC_CODE
                     FROM OPENED_SUBJECTS
                     WHERE OS_CODE = V_OS_CODE);
                    
BEGIN
    SELECT COUNT(*) INTO V_OS_CODE_COUNT
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
    
    IF (V_OS_CODE_COUNT = 0)
        THEN RAISE OS_CODE_EXCEPTION;  
    END IF;
    
    SELECT OS_START_DATE, OS_END_DATE INTO V_START, V_FINAL_DATE
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
    
    IF (V_FINAL_DATE < SYSDATE OR SYSDATE BETWEEN V_START AND V_FINAL_DATE)
        THEN RAISE OS_DATE_EXCEPTION;
    END IF;
    
    -- H1 커서 오픈
    OPEN H1;
    
    LOOP
    FETCH H1 INTO V_OC_START_DATE, V_OC_END_DATE;
    
    IF (V_OS_START_DATE BETWEEN V_OC_START_DATE AND V_OC_END_DATE) 
        OR (V_OS_END_DATE BETWEEN V_OC_START_DATE AND V_OC_END_DATE)
            THEN RAISE OS_DATE_EXCEPTION1;
    END IF;
    
    EXIT WHEN H1%NOTFOUND;
    
    END LOOP;
    
    CLOSE H1;
  
    -- H2 커서 오픈
    OPEN H2;
    
    LOOP
    FETCH H2 INTO START1, END1;
    
    IF  (V_OS_START_DATE NOT BETWEEN START1 AND END1) 
        OR (V_OS_END_DATE NOT BETWEEN START1 AND END1)
            THEN RAISE OS_DATE_EXCEPTION2;
    END IF;
    
    EXIT WHEN H2%NOTFOUND;
    
    END LOOP;
    
    CLOSE H2;               

    UPDATE OPENED_SUBJECTS
    SET OS_START_DATE = V_OS_START_DATE
      , OS_END_DATE = V_OS_END_DATE
      , BK_CODE = V_BK_CODE
      , SB_CODE = V_SB_CODE
    WHERE OS_CODE = V_OS_CODE;

    EXCEPTION
       WHEN OS_CODE_EXCEPTION
            THEN RAISE_APPLICATION_ERROR(-20005, '개설 과목 코드를 확인하세요.');
            ROLLBACK;
       WHEN OS_DATE_EXCEPTION
            THEN RAISE_APPLICATION_ERROR(-20005, '과목이  수정이 불가능 합니다.');
            ROLLBACK;
       WHEN OS_DATE_EXCEPTION1
            THEN RAISE_APPLICATION_ERROR(-20005, '다른 과목과 날짜가 겹쳐 수정이 불가능 합니다.');
            ROLLBACK;
       WHEN OS_DATE_EXCEPTION2
            THEN RAISE_APPLICATION_ERROR(-20005, '과정 기간과 일치 하지 않습니다.');
            ROLLBACK;     
       WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.'); 
            ROLLBACK;   
END;

--개설과목의 성적 배점 수정
CREATE OR REPLACE PROCEDURE UPDATE_RATE
( V_OS_CODE       IN OPENED_SUBJECTS.OS_CODE%TYPE
, V_ATT_RATE      IN OPENED_SUBJECTS.ATT_RATE%TYPE
, V_WRI_RATE      IN OPENED_SUBJECTS.WRI_RATE%TYPE
, V_PRC_RATE      IN OPENED_SUBJECTS.PRC_RATE%TYPE )
IS
    V_TOTAL_RATE        NUMBER;
    V_OS_CODE_COUNT     NUMBER;
    V_OC_START_DATE     DATE;
    V_OC_END_DATE       DATE;
    V_OS_START_DATE     DATE;
    V_OS_END_DATE       DATE;
BEGIN

    SELECT COUNT(*) INTO V_OS_CODE_COUNT
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
    
    IF (V_OS_CODE_COUNT = 0)
        THEN RAISE_APPLICATION_ERROR(-20005, '개설 과목 코드가 존재하지 않습니다');  
    END IF;

    V_TOTAL_RATE := V_ATT_RATE + V_WRI_RATE + V_PRC_RATE;

    IF V_TOTAL_RATE != 100 
        THEN
            RAISE_APPLICATION_ERROR(-20005, '출결, 필기, 실기 비율의 합이 100이어야 합니다.');
    ELSE
        UPDATE OPENED_SUBJECTS
        SET ATT_RATE = V_ATT_RATE, WRI_RATE = V_WRI_RATE, PRC_RATE = V_PRC_RATE
        WHERE OS_CODE = V_OS_CODE;    
    END IF;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20005, '다시 입력하세요.');
END;

--③ 개설과목 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_OS
(
    V_OS_CODE  IN OPENED_SUBJECTS.OS_CODE%TYPE
)
IS  
    V_START DATE;
    V_OS_CODE1 OPENED_SUBJECTS.OS_CODE%TYPE;
    
BEGIN

    SELECT MAX(OS_START_DATE) INTO V_START       -- 개설과목 시작일 받아옴
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
    
    IF (SYSDATE <= V_START)
        THEN RAISE_APPLICATION_ERROR(-20001, '진행중인 과목입니다 다시 확인해 주세요');
    END IF;
    
    DELETE                                  -- 해당 과목에 맞는 성적 삭제
    FROM SCORE
    WHERE OS_CODE = V_OS_CODE;             
    
    DELETE                                  -- 성적 삭제 후 개설 과목 삭제
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS_CODE;
    
END;

--① 수강신청 데이터 입력
CREATE OR REPLACE PROCEDURE INSERT_REGISTRATION
( V_S_CODE IN STUDENTS.S_CODE%TYPE
, V_OC_CODE IN OPENED_COURSES.OC_CODE%TYPE
)
IS
    EMP_S_CODE NUMBER;
    EMP_OC_CODE NUMBER;
    
    EMP_DATE DATE;
    
    USER_DEFINE_ERROR1 EXCEPTION;
    USER_DEFINE_ERROR2 EXCEPTION;
    USER_DEFINE_ERROR3 EXCEPTION;
BEGIN

    -- 학생코드/개설과정코드 없을 때(NOT FOUND 포함)
    -- EMP_S_CODE, EMP_OC_CODE에 대입해서 0일 경우 오류
    EMP_S_CODE := FN_REGISTRAION_S_CODE(V_S_CODE);
    EMP_OC_CODE := FN_REGISTRAION_OC_CODE(V_OC_CODE);
    
    --오류 잡기
    IF (EMP_S_CODE = 0)       -- 학생코드가 존재하지 않을 경우
        THEN RAISE USER_DEFINE_ERROR1;
    ELSIF (EMP_OC_CODE = 0)   -- 개설과정코드가 존재하지 않을 경우
        THEN RAISE USER_DEFINE_ERROR2; 
    END IF;
   
    -- 수강 끝난 과정 신청할 경우 오류잡기
    SELECT OC_START_DATE INTO EMP_DATE
    FROM OPENED_COURSES
    WHERE OC_CODE = V_OC_CODE;
    
    IF EMP_DATE < SYSDATE
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;
     
    -- 오류 없을 경우 수강신청에 입력
    INSERT INTO REGISTRATION(RG_CODE, S_CODE, OC_CODE)
        VALUES(REGISTRATION_SEQ.NEXTVAL, V_S_CODE, V_OC_CODE);       
    -- 예외처리
    EXCEPTION
    WHEN USER_DEFINE_ERROR1
        THEN RAISE_APPLICATION_ERROR(-20012, '학생 정보를 확인해주세요. ');
             ROLLBACK;
    WHEN no_data_found
        THEN RAISE_APPLICATION_ERROR(-20012, 'NOT FOUND');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR2
        THEN RAISE_APPLICATION_ERROR(-20013, '과정 정보를 확인해주세요. ');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR3
        THEN RAISE_APPLICATION_ERROR(-20014, '해당 과정은 등록기간이 아닙니다.');
    WHEN OTHERS
        THEN RAISE_APPLICATION_ERROR(-20014, '기타오류.'); ROLLBACK;
    
    COMMIT;
END;

--② 수강신청 데이터 수정
CREATE OR REPLACE PROCEDURE UPDATE_REGISTRATION 
( V_RG IN REGISTRATION.RG_CODE%TYPE
, V_SC IN STUDENTS.S_CODE%TYPE
, V_OC IN OPENED_COURSES.OC_CODE%TYPE
)
IS
    EMP_OC_CODE NUMBER;
    EMP_S_CODE NUMBER;
 
    EMP_DATE DATE;
    
    EMP_OC_CODE2 OPENED_COURSES.OC_CODE%TYPE;
    EMP_DATE2 DATE;
    
    USER_DEFINE_ERROR1 EXCEPTION;
    USER_DEFINE_ERROR2 EXCEPTION;
    USER_DEFINE_ERROR3 EXCEPTION;
    USER_DEFINE_ERROR4 EXCEPTION;

BEGIN

     --현재 변경하려는 수강과정이 이미 개강한 과정인지 시작날짜 확인
    SELECT OC_CODE INTO EMP_OC_CODE2
    FROM REGISTRATION
    WHERE RG_CODE = V_RG;
    
    SELECT OC_START_DATE INTO EMP_DATE2
    FROM OPENED_COURSES
    WHERE OC_CODE = EMP_OC_CODE2;


    -- 존재하는 수강과정 코드인지 검사 (노은하)

    EMP_S_CODE := FN_REGISTRAION_S_CODE(V_SC);
    EMP_OC_CODE := FN_REGISTRAION_OC_CODE(V_OC);

    -- 수정하고자 하는 과정 시작일 확인
    SELECT OC_START_DATE INTO EMP_DATE
    FROM OPENED_COURSES
    WHERE OC_CODE = V_OC;
 

    --오류 잡기
    IF (EMP_S_CODE = 0)    -- 학생코드가 존재하지않을경우
        THEN RAISE USER_DEFINE_ERROR1; 
    ELSIF (EMP_OC_CODE = 0)   -- 개설과정코드가 존재하지 않을 경우
        THEN RAISE USER_DEFINE_ERROR2; 
    ELSIF (EMP_DATE < SYSDATE) -- 과정시작일이 현재보다 과거
        THEN RAISE USER_DEFINE_ERROR3;   
    ELSIF (EMP_DATE2 < SYSDATE) -- 변경하려는 과정이 이미 시작한 과정일 경우
        THEN RAISE USER_DEFINE_ERROR4;
    END IF;

    DELETE                     -- 지우는 것은 트리거로 완료됨, 이하 인서트 응용
    FROM REGISTRATION
    WHERE RG_CODE = V_RG
      AND S_CODE = V_SC;
 
    INSERT INTO REGISTRATION(RG_CODE, S_CODE, OC_CODE)
        VALUES(V_RG, V_SC, V_OC);
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR1
        THEN RAISE_APPLICATION_ERROR(-20012, '학생 정보를 확인해주세요.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR2
        THEN RAISE_APPLICATION_ERROR(-20013, '과정 정보를 확인해주세요.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR3
        THEN RAISE_APPLICATION_ERROR(-20014, '해당 과정은 등록기간이 아닙니다.');
            ROLLBACK;   
    WHEN USER_DEFINE_ERROR4
        THEN RAISE_APPLICATION_ERROR(-20015, '개강일이 지난 과정은 수강 취소가 불가능합니다.');
            ROLLBACK;              
    WHEN no_data_found
        THEN RAISE_APPLICATION_ERROR(-20030, 'NOT FOUND');
            ROLLBACK;
    WHEN OTHERS
        THEN RAISE_APPLICATION_ERROR(-20006,'입력확인부탁부탁'); 
        ROLLBACK;
    
    
    COMMIT;
END;

--③ 수강신청 데이터 삭제
CREATE OR REPLACE PROCEDURE DELETE_REGISTRATION
(V_RG_CODE IN REGISTRATION.RG_CODE%TYPE)
IS
    EMP_OC_CODE OPENED_COURSES.OC_CODE%TYPE;
    EMP_DATE DATE;
    
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
     --현재 삭제하려는 수강과정이 이미 개강한 과정인지 시작날짜 확인 
    SELECT OC_CODE INTO EMP_OC_CODE
    FROM REGISTRATION
    WHERE RG_CODE = V_RG_CODE;
    
    SELECT OC_START_DATE INTO EMP_DATE
    FROM OPENED_COURSES
    WHERE OC_CODE = EMP_OC_CODE;
    
    
    IF (EMP_DATE <= SYSDATE)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
        -- 트리거로 성적 테이블 지워짐
    DELETE 
    FROM REGISTRATION
    WHERE RG_CODE = V_RG_CODE;

    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20012, '이미 개강한 과정은 수강 취소할 수 없습니다.');
            ROLLBACK;
    WHEN OTHERS
        THEN RAISE_APPLICATION_ERROR(-20012, '오류가 발생했습니다..');ROLLBACK;   
        
    COMMIT;
END;

--① 성적 데이터 입력(DB 입장에선 수정)
CREATE OR REPLACE PROCEDURE PRC_SCORE_UPDATE
( V_RG   IN REGISTRATION.RG_CODE%TYPE
, V_OS   IN OPENED_SUBJECTS.OS_CODE%TYPE
, V_ATT  IN SCORE.ATT_SCORE%TYPE
, V_WRI  IN SCORE.WRI_SCORE%TYPE
, V_PRC  IN SCORE.PRC_SCORE%TYPE
)
IS
    V_DATE  OPENED_SUBJECTS.OS_END_DATE%TYPE;
    V_DROP  REGISTRATION.RG_CODE%TYPE;
    
    OVER_DATE   EXCEPTION;
    DROP_MEMBER EXCEPTION;
    OVER_NUMBER EXCEPTION;
BEGIN
    SELECT OS_END_DATE INTO V_DATE
    FROM OPENED_SUBJECTS
    WHERE OS_CODE = V_OS;
    
    IF(V_DATE>SYSDATE)
        THEN RAISE OVER_DATE;
    END IF;
    
    SELECT D.RG_CODE INTO V_DROP
    FROM DROP_LIST D, REGISTRATION R
    WHERE D.RG_CODE(+) = R.RG_CODE
      AND R.RG_CODE = V_RG;
    
    IF(V_DROP IS NOT NULL)
        THEN RAISE DROP_MEMBER;
    END IF;
    
    IF(V_ATT>100 OR V_ATT<0)
        THEN RAISE OVER_NUMBER;
    ELSIF(V_WRI>100 OR V_WRI<0)
        THEN RAISE OVER_NUMBER;
    ELSIF(V_PRC>100 OR V_PRC<0)
        THEN RAISE OVER_NUMBER;
    ELSE
        UPDATE SCORE
        SET ATT_SCORE = V_ATT, WRI_SCORE = V_WRI, PRC_SCORE = V_PRC
        WHERE RG_CODE = V_RG
          AND OS_CODE = V_OS;
    END IF;
    
    EXCEPTION
        WHEN OVER_DATE
            THEN RAISE_APPLICATION_ERROR(-20001, '수업이 끝난 강의만 성적을 입력 할 수 있습니다.');
                ROLLBACK;
        WHEN DROP_MEMBER
            THEN RAISE_APPLICATION_ERROR(-20002, '중도 탈락한 학생은 성적을 입력 할 수 없습니다.');
                ROLLBACK;
        WHEN OVER_NUMBER
            THEN RAISE_APPLICATION_ERROR(-20003, '각 항목당 점수는 0점 이상 100점 이하로만 입력이 가능합니다.');
                ROLLBACK;
        WHEN OTHERS 
            THEN RAISE_APPLICATION_ERROR(-20004, '입력 정보를 다시 확인해주세요.');
                ROLLBACK;
    COMMIT;
END;

--② 성적 데이터 삭제(DB 입장에선 수정)
CREATE OR REPLACE PROCEDURE PRC_SCORE_DELETE
( V_RG IN REGISTRATION.RG_CODE%TYPE
, V_OS IN OPENED_SUBJECTS.OS_CODE%TYPE
)
IS
BEGIN
    UPDATE SCORE
    SET ATT_SCORE = NULL, WRI_SCORE = NULL, PRC_SCORE = NULL
    WHERE RG_CODE = V_RG
      AND OS_CODE = V_OS;
    
    EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20008,'입력정보를 확인하세요.');
                 ROLLBACK;
    COMMIT;
END;

--① 중도포기목록 데이터 등록
CREATE OR REPLACE PROCEDURE INSERT_DROP_LIST
( V_RG IN REGISTRATION.RG_CODE%TYPE
, V_DR IN DROP_REASONS.DR_CODE%TYPE
, V_DATE IN DROP_LIST.DL_DATE%TYPE
)
IS
    V_START OPENED_COURSES.OC_START_DATE%TYPE;
    V_END OPENED_COURSES.OC_END_DATE%TYPE;
BEGIN
    SELECT OC.OC_START_DATE, OC.OC_END_DATE INTO V_START, V_END
    FROM OPENED_COURSES OC, REGISTRATION R
    WHERE OC.OC_CODE = R.OC_CODE
      AND R.RG_CODE = V_RG;
    
    IF(SYSDATE BETWEEN V_START AND V_END)
        THEN INSERT INTO DROP_LIST(DL_CODE, RG_CODE, DR_CODE, DL_DATE)
             VALUES(DL_SEQ.NEXTVAL, V_RG, V_DR, NVL(V_DATE,SYSDATE));
    ELSE
        RAISE_APPLICATION_ERROR(-20001, '현재 진행중인 과정만 포기 할 수 있습니다.');
        ROLLBACK;
    END IF;

     EXCEPTION
        WHEN OTHERS
            THEN RAISE_APPLICATION_ERROR(-20001, '입력정보를 확인하세요.');
            ROLLBACK;
    COMMIT;
END;
