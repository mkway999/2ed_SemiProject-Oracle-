-- 신규 수강신청 시 성적 테이블에 자동으로 데이터 입력
CREATE OR REPLACE TRIGGER TRG_SCORE
          AFTER
          INSERT ON REGISTRATION
          FOR EACH ROW
DECLARE
    V_OS OPENED_SUBJECTS.OS_CODE%TYPE;
    V_OC OPENED_COURSES.OC_CODE%TYPE;
    
    CURSOR CUR_SCORE
    IS
    SELECT OS_CODE
    FROM OPENED_SUBJECTS
    WHERE OC_CODE = :NEW.OC_CODE;
    
BEGIN
    OPEN CUR_SCORE;
         LOOP
            FETCH CUR_SCORE INTO V_OS;
            
            EXIT WHEN CUR_SCORE%NOTFOUND;
            
            INSERT INTO SCORE(SC_CODE, RG_CODE, OS_CODE)
            VALUES(SCORE_SEQ.NEXTVAL, :NEW.RG_CODE, V_OS);
         END LOOP;
    CLOSE CUR_SCORE;
END;

-- 수강신청에서 데이터 삭제 시 성적 테이블에서 자동으로 삭제
CREATE OR REPLACE TRIGGER TRG_SCORE_DELETE
        BEFORE
        DELETE ON REGISTRATION
        FOR EACH ROW
DECLARE
    V_START OPENED_COURSES.OC_START_DATE%TYPE;
BEGIN
    SELECT OC_START_DATE INTO V_START
    FROM OPENED_COURSES
    WHERE OC_CODE = :OLD.OC_CODE;
    
    IF(SYSDATE >= V_START)
        THEN RAISE_APPLICATION_ERROR(-20006,'개강일이 지난 과정은 수강 취소가 불가능합니다.'); ROLLBACK;
    ELSE
        DELETE
        FROM SCORE
        WHERE RG_CODE = :OLD.RG_CODE;
    END IF;
END;

-- 수강신청 시 중복 개설과정 혹은 기간이 겹치는 과정인지 판별하는 트리거
CREATE OR REPLACE TRIGGER REGISTRATION
        BEFORE
        INSERT ON REGISTRATION
        FOR EACH ROW
DECLARE
    V_OC OPENED_COURSES.OC_CODE%TYPE;
    O_START OPENED_COURSES.OC_START_DATE%TYPE;
    O_END OPENED_COURSES.OC_END_DATE%TYPE;
    N_START OPENED_COURSES.OC_START_DATE%TYPE;
    N_END OPENED_COURSES.OC_END_DATE%TYPE;
    
    CURSOR CUR_REG
    IS
    SELECT OC_CODE
    FROM REGISTRATION
    WHERE S_CODE = :NEW.S_CODE;
    
BEGIN
    OPEN CUR_REG;
    
    SELECT OC_START_DATE, OC_END_DATE INTO N_START, N_END
    FROM OPENED_COURSES
    WHERE OC_CODE = :NEW.OC_CODE;
    
    LOOP
        FETCH CUR_REG INTO V_OC;
        
        EXIT WHEN CUR_REG%NOTFOUND;

        IF(:NEW.OC_CODE = V_OC)
            THEN RAISE_APPLICATION_ERROR(-20007, '이미 신청한 과정의 수강신청은 불가능합니다.');
            ROLLBACK;
        ELSE
            SELECT OC_START_DATE, OC_END_DATE INTO O_START, O_END 
            FROM OPENED_COURSES
            WHERE OC_CODE = V_OC;
            
                IF((N_START BETWEEN O_START AND O_END) OR (N_END BETWEEN O_START AND O_END)
                    OR (O_START BETWEEN N_START AND N_END) OR (O_END BETWEEN N_START AND N_END))
                    THEN RAISE_APPLICATION_ERROR(-20001, '수강 기간이 겹치기 때문에 수강신청 불가!!.');
                    ROLLBACK;
                END IF;
            END IF;
        END LOOP; 
    CLOSE CUR_REG;
END;

-- 신규 개설과성 생성 시 담당 교수자가 강의중인지 판별하는 트리거
CREATE OR REPLACE TRIGGER TRG_OPENED_SUBJECTS
        BEFORE
        INSERT ON OPENED_SUBJECTS
        FOR EACH ROW
DECLARE
    V_START OPENED_SUBJECTS.OS_START_DATE%TYPE;
    V_END OPENED_SUBJECTS.OS_END_DATE%TYPE;
    
    CURSOR CUR_DATE
    IS
    SELECT OS_START_DATE, OS_END_DATE
    FROM OPENED_SUBJECTS
    WHERE P_CODE = :NEW.P_CODE;
BEGIN
    OPEN CUR_DATE;
    LOOP
        FETCH CUR_DATE INTO V_START, V_END;
        
        EXIT WHEN CUR_DATE%NOTFOUND;
        
        IF(:NEW.OS_START_DATE BETWEEN V_START AND V_END
            OR :NEW.OS_END_DATE BETWEEN V_START AND V_END)
                THEN RAISE_APPLICATION_ERROR(-20006, '해당기간 교수자가 강의중입니다.');
        END IF;
        
    END LOOP;

END;
